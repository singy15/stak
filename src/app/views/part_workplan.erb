

<meta http-equiv="Content-type" content="text/html; charset=utf-8">

<%= erb :part_gantt_include %>

<link rel="stylesheet" type="text/css" href="/css/workplan.css">

<div class="easyui-panel" style="width:100%;margin-bottom:5px;">
  <div id="gantt_here" style='width:100%; height:350px;'></div>
</div>

<div id="vue-main" class="vue-component">
  <%= erb :part_workplan_toolbar %>

  <div class="easyui-panel" style="width:100%;padding:5px;margin-bottom:5px;">
    <%= erb :part_workplan_form %>
  </div>

  <!-- <div class="easyui-panel" style="width:100%;padding:5px;margin-bottom:5px;"> -->
    <!-- <%= erb :part_basic_control %> -->
  <!-- </div> -->
</div>


<script type="text/javascript" src="/js/ex_datetimebox.js"></script>
<script type="text/javascript" src="/js/core_util.js"></script>
<script type="text/javascript" src="/js/constants.js"></script>
<script type="text/javascript" src="/js/domain/base_domain.js"></script>
<script type="text/javascript" src="/js/domain/workplan_domain.js"></script>

<script>
  var domain = new WorkplanDomain();

  function daysStyle(date){
      var dateToStr = gantt.date.date_to_str("%D");
      if (dateToStr(date) == "Sun"||dateToStr(date) == "Sat")  return "weekend";
      return "";
  };

  function getSubScale(scale) {
    if(scale === "day") {
      return [
        {unit: "day", step: 1, date: "%d", css: daysStyle}
      ];
    } else {
      return [
        {unit: "day", step:1,date:"%d",css:daysStyle},
        {unit: "hour", step: 1, date: "%G", css: daysStyle},
        {unit: "minute", step: 30, date: " ", css: daysStyle}
      ];
    }
  }

  function initGantt(id, subScale, startDate, endDate, minColumnWidth) {
    gantt.config.subscales = subScale;
    gantt.config.start_date = startDate;
    gantt.config.end_date = endDate;
    gantt.config.min_column_width = minColumnWidth;
    gantt.config.keep_grid_width = false;
    gantt.config.grid_resize = true;
    gantt.init(id);
  }

  $(document).ready(function() {
    autosize($('textarea'));

    $("#progress").slider({
      onChange : function(newval, oldval) {
        vue.row.progress = newval / 100.0;
      }
    });

    $("#dpStart").datetimebox({
      onChange: function(newval, oldval) {
        vue.row.start_date = newval;
      }
    });

    $("#dpEnd").datetimebox({
      onChange: function(newval, oldval) {
        vue.row.end_date = newval;
      }
    });

    $("#dpStart").datetimebox("setValue", moment().format("DD-MM-YYYY HH:mm"));

    $("#dpEnd").datetimebox("setValue", moment().add(7,"days").format("DD-MM-YYYY HH:mm"));

    $("#btnNew").click(function() {
      vue.row = domain.getNewRecord();
    });

    $("#btnCopy").click(function() {
      vue.row = domain.copyRecord(vue.row);
    });

    $("#btnDelete").click(function() {
      $.ajax({
        type: "DELETE",
        // url: "/workplans/" + vue.row.task_cd,
        url: "/tasks/" + vue.row.task_cd,
        data: JSON.stringify(vue.row),
        contentType: 'charset=utf-8',
        success: function(data, dataType) { 
          // defaultUpdtSuccessCallback(data, dataType);

          // if(data.success) {
          //   treegrid.treegrid("reload");
          //   vue[propNameSelectedRow] = fnNewRecord();
          // }
          console.log("deleted");

          var sPos = gantt.getScrollState(); // {x:58,y:180}
          var posX = sPos.x;
          var posY = sPos.y;
          gantt.deleteTask(vue.row.task_cd);

          loadTask(function() {
            gantt.scrollTo(posX,posY);
            vue.row = domain.getNewRecord();
          });


        },
        // error: defaultUpdtErrorCallback,
        dataType: "json"
      });
    });

    $("#btnRegister").click(function() {
      console.log("Register");
      var id = vue.row.task_cd;
      $.ajax({
        type: "POST",
        url: "/workplans",
        data: JSON.stringify(vue.row),
        contentType: 'charset=utf-8',
        success: function(data, dataType) { 
          // defaultUpdtSuccessCallback(data, dataType);

          // if(data.success) {
          //   treegrid.treegrid("reload");
          //   vue[propNameSelectedRow] = fnNewRecord();
          // }
            console.log("comp");
            console.log(data);
          if((id !== "") && (id != null)) {
            var sPos = gantt.getScrollState(); // {x:58,y:180}
            var posX = sPos.x;
            var posY = sPos.y;
            loadTask(function() { 
              gantt.selectTask(id); 
              // gantt.showTask(id); 
              gantt.scrollTo(posX,posY);
            });
          } else {
            loadTask(function() {
              gantt.selectTask(data.data.task_cd); 
              gantt.showTask(data.data.task_cd); 
            });
          }
        },
        // error: defaultUpdtErrorCallback,
        dataType: "json"
      });
    });

    $("#btnRefresh").click(function() {
      loadTask();
    });

    $("#btnScaleDay").click(function() {
      var st = moment().add(-2,"months").startOf("day");
      var ed = moment().add(4,"months").startOf("day");
      initGantt("gantt_here", getSubScale("day"), st, ed, 36);
      loadTask();
    });

    $("#btnScaleHour").click(function() {
      $.ajax({
        type: "GET",
        url: (vue.hideClosed)? "/workplans" : "/workplans/with_closed",
        data: JSON.stringify({}),
        contentType: 'charset=utf-8',
        success: function(data, dataType) { 
          var st = moment(_.min(_.map(data.data,function(e){return moment(e.start_date, "DD-MM-YYYY HH:mm").toDate();}))).add(-1,"days").startOf("day").toDate();
          var ed = moment(_.max(_.map(data.data,function(e){return moment(e.end_date, "DD-MM-YYYY HH:mm").toDate();}))).add(1,"days").startOf("day").toDate();
          initGantt("gantt_here", getSubScale("hour"), st, ed, 18);
          loadTask();
        },
        // error: defaultUpdtErrorCallback,
        dataType: "json"
      });
    });

    function swapSortOrder(isUp, id, parentId) {
      if(isUp) {
        console.log("up");
      } else {
        console.log("down");
      }
      var targetId = id;
      var index = gantt.getTaskIndex(id);
      var children = gantt.getChildren(parentId);

      var isMovable = (isUp)? (index > 0) : (index < (children.length - 1));
      var targetIndex = (isUp)? (index-1) : (index+1);
      var row = null;
      var target = null;

      if(isMovable) {
        row = children[index];
        target = children[targetIndex];
        console.log("can swap", row, target);

        var task1Row = gantt.getTask(row);
        var task2Row = gantt.getTask(target);
        var task1 = {
          task_cd : task1Row["id"]
          ,task_cd2 : task1Row.task_cd2
          ,start_date : moment(task1Row.start_date).format('DD-MM-YYYY HH:mm')
          ,end_date : moment(task1Row.end_date).format('DD-MM-YYYY HH:mm')
          ,progress : task1Row.progress
          ,user_cd : task1Row.user_cd
          ,name : task1Row.name
          ,parent_cd : task1Row.parent_cd
          ,sort_order : task2Row.sort_order
          ,work_type : task1Row.work_type
          ,solution_cd : task1Row.solution_cd
          ,task_type : task1Row.task_type
          ,description : task1Row.description
          ,priority_type : task1Row.priority_type
          ,status_type : task1Row.status_type
        };
        var task2 = {
          task_cd : task2Row["id"]
          ,task_cd2 : task2Row.task_cd2
          ,start_date : moment(task2Row.start_date).format('DD-MM-YYYY HH:mm')
          ,end_date : moment(task2Row.end_date).format('DD-MM-YYYY HH:mm')
          ,progress : task2Row.progress
          ,user_cd : task2Row.user_cd
          ,name : task2Row.name
          ,parent_cd : task2Row.parent_cd
          ,sort_order : task1Row.sort_order
          ,work_type : task2Row.work_type
          ,solution_cd : task2Row.solution_cd
          ,task_type : task2Row.task_type
          ,description : task2Row.description
          ,priority_type : task2Row.priority_type
          ,status_type : task2Row.status_type
        };


        $.when(
          $.ajax({
            type: "POST",
            url: "/workplans",
            data: JSON.stringify(task1),
            contentType: 'charset=utf-8',
            success: function(data, dataType) { 
              // defaultUpdtSuccessCallback(data, dataType);

              // if(data.success) {
              //   treegrid.treegrid("reload");
              //   vue[propNameSelectedRow] = fnNewRecord();
              // }
            },
            // error: defaultUpdtErrorCallback,
            dataType: "json"
          }),
          $.ajax({
            type: "POST",
            url: "/workplans",
            data: JSON.stringify(task2),
            contentType: 'charset=utf-8',
            success: function(data, dataType) { 
              // defaultUpdtSuccessCallback(data, dataType);

              // if(data.success) {
              //   treegrid.treegrid("reload");
              //   vue[propNameSelectedRow] = fnNewRecord();
              // }
            },
            // error: defaultUpdtErrorCallback,
            dataType: "json"
          })
        )
        .done(function(data_a, data_b) {
          loadTask(function() { gantt.selectTask(targetId); });
        })
        .fail(function() {
            console.log('error');
        });

      } else {
        console.log("can't swap");
      }
    }

    $("#btnSortUp").click(function() {
      swapSortOrder(true, vue.row.task_cd, (vue.row.parent_cd !== "")? vue.row.parent_cd : 0);
    });

    $("#btnSortDown").click(function() {
      swapSortOrder(false, vue.row.task_cd, (vue.row.parent_cd !== "")? vue.row.parent_cd : 0);
    });

    $("#btnCopyTaskCd").click(function() {
      vue.currentParentCd = vue.row.task_cd;
      execCopy(vue.row.task_cd);
    });

    $("#btnPasteTaskCd").click(function() {
      vue.row.parent_cd = vue.currentParentCd;
    });


    loadTask();
  });
</script>


<script>

  var lastScrollPos = null;

	// var tasks = {
	// 	data: [
	// 		{
	// 			id: 1, text: "Project #2", start_date: "01-04-2018", duration: 18, order: 10,
	// 			progress: 0.4, open: true
	// 		},
	// 		{
	// 			id: 2, text: "Task #1", start_date: "02-04-2018", duration: 8, order: 10,
	// 			progress: 0.6, parent: 1
	// 		},
	// 		{
	// 			id: 3, text: "Task #2", start_date: "11-04-2018", duration: 8, order: 20,
	// 			progress: 0.6, parent: 2
	// 		}
	// 	],
	// 	links: [
	// 		{id: 1, source: 1, target: 2, type: "1"},
	// 		{id: 2, source: 2, target: 3, type: "0"}
	// 	]
	// };


	var tasks = {
		data: [
			{
        id: 1, text: "Project #2", start_date: "01-04-2018", end_date: "02-04-2018", order: 10,
				progress: "0.4", open: true
			},
			{
				id: 2, text: "Task #1", start_date: "02-04-2018", end_date: "06-04-2018", order: 10,
				progress: 0.6, parent: 1, open:true
			},
			{
				id: 3, text: "Task #2", start_date: "03-04-2018", end_date: "04-04-2018", order: 20,
				progress: 0.6, parent: 2
			}
		],
		links: [
			// {id: 1, source: 1, target: 2, type: "1"},
			// {id: 2, source: 2, target: 3, type: "0"}
		]
  };

  function formatTask(task){
    // return task.task_cd + " : " + task.name;
    return task.name;
  };


  function mapper(field, map) {
    var col = field;
    var kv = {};
    for(var i = 0; i < map.length; i+=1) {
      kv[map[i]["value"]] = map[i]["text"];
    }

    return function(task) { return kv[task[col]]; }
  }

  gantt.config.columns=[
    {name:"text", label:"Task name", tree:true, width: 250, /*width:"*", min_width: 120,*/ template:formatTask },
    // {name:"start_date", label:"Start", align: "center",resize:true },
    // {name:"end_date",   label:"End",   align: "center",resize:true },
    {name:"solution_cd",   label:"Solution", width: 80,   align: "center", template : mapper("solution_cd", <%= @key_value_solution %>) },
    {name:"user_cd", label:"Assign", width: 60, align: "center", template : mapper("user_cd", <%= @key_value_user %>) },
    {name:"progress", label:"Progr", width: 45, align: "center", template: function(task) {return Math.round(task.progress * 100.0) + "%";} },
    {name:"status_type", label:"Status", width: 80, align: "center", template: mapper("status_type", <%= @key_value_task_status_type %>) }
  ];


	gantt.config.keep_grid_width = false;
	gantt.config.grid_resize = true;
  gantt.config.row_height = 20;
  gantt.config.open_tree_initially = true;

  // gantt.config.duration_unit = "hour";
  // gantt.config.work_time = true; 
  // gantt.config.skip_off_time = true; 
  // gantt.setWorkTime({ hours:[9,18] });

  // gantt.config.autosize = "y";

  gantt.config.start_date = moment().add(-2,"months");
  gantt.config.end_date = moment().add(4,"months");

  gantt.templates.scale_cell_class = function(date){
      if(date.getDay()==0||date.getDay()==6){ return "weekend"; }
  };
  gantt.templates.tooltip_text = function(start,end,task){
    var text = "";
    text += "<b>Solution: </b>" + (mapper("solution_cd", <%= @key_value_solution %>))(task) + "<br>";
    text += "<b>Task CD: </b>" + task.task_cd + "<br>";
    text += "<b>Name: </b>" + task.name + "<br>";
    text += "<b>Description: </b><br>";
    text += '<div style="padding:5px">'+marked(task.description)+'</div>';
    return text;
  };

	gantt.config.scale_unit = "month";
	gantt.config.date_scale = "%F, %Y";

  gantt.config.tooltip_timeout = 1000;
  gantt.config.tooltip_hide_timeout = 1;

  gantt.config.min_column_width = 36;
	gantt.config.scale_height = 50;

  gantt.config.order_branch = true;

  gantt.config.duration_unit = "hour";

  gantt.templates.scale_cell_class = function(date){
    return "";
  };

	gantt.config.subscales = [
		{unit: "day", step: 1, date: "%d", css: daysStyle}
	];

  //gantt.groupBy({
  //  relation_property: "user_cd",
  //  groups: [
  //    {key:'001', label: "admin"},
  //    {key:'002', label: "worker1"},
  //  ],
  //  group_id: "key",
  //  group_text: "label"
  //});


	gantt.templates.task_class = function(start, end, obj){
    if(obj.task_type === "TT01TS") {
      return "";
    } else if(obj.task_type == "TT02BG") {
      return "task_actual";
    } else if(obj.task_type == "TT03PJ") {
      return "task_project";
    }
	}

  gantt.init("gantt_here");

  gantt.attachEvent("onBeforeRowDragEnd", function(id, parent, tindex){
    var task = gantt.getTask(id);
    if(task.parent != parent)
        return false;
    return true;
  });

  // gantt.attachEvent("onAfterTaskDrag", function(id, mode, e){
  //   if (mode === "progress") {
  //     // var task = gantt.getTask(id);
  //     // var roundedProgress = (Math.ceil((task.progress * 100.0)/5.0) * 5.0) / 100.0;
  //   }
  // });

  gantt.attachEvent("onRowDragEnd", function(id, target) {

    var task1Row = gantt.getTask(id);
    var task2Row = gantt.getTask(target);
    var task1 = {
      task_cd : task1Row["id"]
      ,task_cd2 : task1Row.task_cd2
      ,start_date : moment(task1Row.start_date).format('DD-MM-YYYY HH:mm')
      ,end_date : moment(task1Row.end_date).format('DD-MM-YYYY HH:mm')
      ,progress : task1Row.progress
      ,user_cd : task1Row.user_cd
      ,name : task1Row.name
      ,parent_cd : task1Row.parent_cd
      ,sort_order : task2Row.sort_order
      ,work_type : task1Row.work_type
      ,description : task1Row.description
    };
    var task2 = {
      task_cd : task2Row["id"]
      ,task_cd2 : task2Row.task_cd2
      ,start_date : moment(task2Row.start_date).format('DD-MM-YYYY HH:mm')
      ,end_date : moment(task2Row.end_date).format('DD-MM-YYYY HH:mm')
      ,progress : task2Row.progress
      ,user_cd : task2Row.user_cd
      ,name : task2Row.name
      ,parent_cd : task2Row.parent_cd
      ,sort_order : task1Row.sort_order
      ,work_type : task2Row.work_type
      ,description : task2Row.description
    };


    $.when(
      $.ajax({
        type: "POST",
        url: "/workplans",
        data: JSON.stringify(task1),
        contentType: 'charset=utf-8',
        success: function(data, dataType) { 
          // defaultUpdtSuccessCallback(data, dataType);

          // if(data.success) {
          //   treegrid.treegrid("reload");
          //   vue[propNameSelectedRow] = fnNewRecord();
          // }
        },
        // error: defaultUpdtErrorCallback,
        dataType: "json"
      }),
      $.ajax({
        type: "POST",
        url: "/workplans",
        data: JSON.stringify(task2),
        contentType: 'charset=utf-8',
        success: function(data, dataType) { 
          // defaultUpdtSuccessCallback(data, dataType);

          // if(data.success) {
          //   treegrid.treegrid("reload");
          //   vue[propNameSelectedRow] = fnNewRecord();
          // }
        },
        // error: defaultUpdtErrorCallback,
        dataType: "json"
      })
    )
    .done(function(data_a, data_b) {
          loadTask();
          vue.row = domain.getNewRecord();
    })
    .fail(function() {
        console.log('error');
    });

  });

  gantt.attachEvent("onGanttScroll", function (left, top){
    lastScrollPos = left;
  });

  gantt.attachEvent("onTaskSelected", function(id){
    //any custom logic here
    var item = gantt.getTask(id);
    var vueRow = {
      task_cd : item["id"]
      ,task_cd2 : item.task_cd2
      ,start_date : moment(item.start_date).format('DD-MM-YYYY HH:mm')
      ,end_date : moment(item.end_date).format('DD-MM-YYYY HH:mm')
      ,progress : item.progress
      ,user_cd : item.user_cd
      ,name : item.name
      ,parent_cd : item.parent_cd
      ,sort_order : item.sort_order
      ,work_type : item.work_type
      ,solution_cd : item.solution_cd
      ,task_type : item.task_type
      ,description : item.description
      ,priority_type : item.priority_type
      ,status_type : item.status_type
    };
    vue.row = vueRow;
  });

  gantt.attachEvent("onTaskRowClick", function(id,row){
    //any custom logic here
    var item = gantt.getTask(id);
    console.log(item);
    var vueRow = {
      task_cd : item["id"]
      ,task_cd2 : item.task_cd2
      ,start_date : moment(item.start_date).format('DD-MM-YYYY HH:mm')
      ,end_date : moment(item.end_date).format('DD-MM-YYYY HH:mm')
      ,progress : item.progress
      ,user_cd : item.user_cd
      ,name : item.name
      ,parent_cd : item.parent_cd
      ,sort_order : item.sort_order
      ,work_type : item.work_type
      ,solution_cd : item.solution_cd
      ,task_type : item.task_type
      ,description : item.description
      ,priority_type : item.priority_type
      ,status_type : item.status_type
    };
    vue.row = vueRow;
  });

  gantt.attachEvent("onAfterTaskUpdate", function(id,item){
      //any custom logic here
    console.log("updated");
    console.log(item);
    console.log(moment(item.start_date).format('DD-MM-YYYY HH:mm'));

    var roundedProgress = (Math.round((item.progress * 100.0)/5.0) * 5.0) / 100.0;

    var diff = {
      task_cd : item["id"]
      ,task_cd2 : item.task_cd2
      ,start_date : moment(item.start_date).format('DD-MM-YYYY HH:mm')
      ,end_date : moment(item.end_date).format('DD-MM-YYYY HH:mm')
      // ,progress : item.progress
      ,progress : roundedProgress
      ,user_cd : item.user_cd
      ,name : item.name
      ,parent_cd : item.parent_cd
      ,sort_order : item.sort_order
      ,work_type : item.work_type
      ,solution_cd : item.solution_cd
      ,task_type : item.task_type
      ,description : item.description
      ,priority_type : item.priority_type
      ,status_type : item.status_type
    };
    var id = item["id"];
    $.ajax({
      type: "POST",
      url: "/workplans",
      data: JSON.stringify(diff),
      contentType: 'charset=utf-8',
      success: function(data, dataType) { 
        // defaultUpdtSuccessCallback(data, dataType);

        // if(data.success) {
        //   treegrid.treegrid("reload");
        //   vue[propNameSelectedRow] = fnNewRecord();
        // }

        if((id !== "") && (id != null)) {
          var sPos = gantt.getScrollState(); // {x:58,y:180}
          var posX = sPos.x;
          var posY = sPos.y;
          loadTask(function() { 
            gantt.selectTask(id); 
            // gantt.showTask(id); 
            gantt.scrollTo(posX,posY);
          });
          console.log("task selecting");
        } else {
          loadTask(function() {
            gantt.selectTask(data.data.task_cd); 
            gantt.showTask(data.data.task_cd); 
          });
          console.log("task not selecting");
        }


        // var item = gantt.getTask(id);
        // var vueRow = {
        //   task_cd : item["id"]
        //   ,task_cd2 : item.task_cd2
        //   ,start_date : moment(item.start_date).format('DD-MM-YYYY HH:mm')
        //   ,end_date : moment(item.end_date).format('DD-MM-YYYY HH:mm')
        //   ,progress : item.progress
        //   ,user_cd : item.user_cd
        //   ,name : item.name
        //   ,parent_cd : item.parent_cd
        //   ,sort_order : item.sort_order
        //   ,work_type : item.work_type
        // };
        // vue.row = vueRow;
      },
      // error: defaultUpdtErrorCallback,
      dataType: "json"
    });
  });

  function loadTask(postLoad) {
    $.ajax({
      type: "GET",
      url: (vue.hideClosed)? "/workplans" : "/workplans/with_closed",
      data: JSON.stringify({}),
      contentType: 'charset=utf-8',
      success: function(data, dataType) { 
        // defaultUpdtSuccessCallback(data, dataType);

        // if(data.success) {
        //   treegrid.treegrid("reload");
        //   vue[propNameSelectedRow] = fnNewRecord();
        // }

        gantt.clearAll(); 
        gantt.parse({
          data:data.data,
          links:[]
        });
        if(lastScrollPos) {
          gantt.scrollTo(lastScrollPos, null);
        } else {
          gantt.showDate(new Date());
        }

        var today = moment();
        gantt.addMarker({ start_date: today.toDate(), css: "today", text: "",  title:today.format("DD-MM-YYYY")});

        if(postLoad) {
          postLoad();
        }
      },
      // error: defaultUpdtErrorCallback,
      dataType: "json"
    });
  }

  function toLocaleString( date )
  {
    return [
        date.getDate(),
        date.getMonth() + 1,
        date.getFullYear()
        ].join( '-' );
  }
</script>

<script>
  var vue = new Vue({
    el: '#vue-main',
    data: {
      key_value_task_status_type : <%= @key_value_task_status_type %>,
      key_value_task_type : <%= @key_value_task_type %>,
      key_value_task_priority_type : <%= @key_value_task_priority_type %>,
      key_value_solution : <%= @key_value_solution %>,
      key_value_task_task_relation_type : <%= @key_value_task_task_relation_type %>,
      key_value_user : <%= @key_value_user %>,
      key_value_work_type : <%= @key_value_work_type %>,
      row: domain.getNewRecord(),
      showDescriptionView : false,
      currentParentCd : "",
      hideClosed : true,
      fixedHeight : true,
      scrollOnClick : true
    },
    watch: {
      //hideClosed: 'loadByChecked',
      // fixedHeight: 'loadByChangeHeight',
      row : 'setWhiteboardBtn',
    },
    methods: {
      setWhiteboardBtn : function() {
        $("#btnWhiteboard").css("display", "none");
        $.ajax({
          type: "GET",
          url: "/whiteboard/" + vue.row.task_cd + "/exist",
          contentType: 'charset=utf-8',
          success: function(data, dataType) { 
            // console.log(data);
            if(data.success) {
              $("#btnWhiteboard").css("display", "inherit");
              if(data.data) {
                $("#btnWhiteboard").css("opacity", "1.0");
              } else {
                $("#btnWhiteboard").css("opacity", "0.3");
              }
            }
          },
          dataType: "json"
        });
      },
      loadByChecked : function(toggleState) {
        this.hideClosed = toggleState;
        loadTask();
      },
      loadByScrollOnClick : function(toggleState) {
        this.scrollOnClick = toggleState;
        gantt.config.scroll_on_click = toggleState;
        loadTask();
      },
      loadByChangeHeight : function(toggleState) {
        this.fixedHeight = toggleState;
        if(vue.fixedHeight) {
          gantt.config.autosize = false;
        } else {
          gantt.config.autosize = "y";
        }
        gantt.init("gantt_here");
        if(vue.fixedHeight) {
          $("#gantt_here").css("height", "400px")
        }
        loadTask();
      },
      toggleDescriptionEdit : function() {
        this.showDescriptionView = !(this.showDescriptionView);
      },
      copyTimestamp : function() {
        execCopy(moment().format("YYYY-MM-DD HH:mm:ss"));
      },
      refreshTask : function() {
        loadTask();
      },
      toScaleDay : function() {
        var st = moment().add(-2,"months").startOf("day");
        var ed = moment().add(4,"months").startOf("day");
        initGantt("gantt_here", getSubScale("day"), st, ed, 36);
        loadTask();
      },
      toScaleHour : function() {
        $.ajax({
          type: "GET",
          url: (vue.hideClosed)? "/workplans" : "/workplans/with_closed",
          data: JSON.stringify({}),
          contentType: 'charset=utf-8',
          success: function(data, dataType) { 
            var st = moment(_.min(_.map(data.data,function(e){return moment(e.start_date, "DD-MM-YYYY HH:mm").toDate();}))).add(-1,"days").startOf("day").toDate();
            var ed = moment(_.max(_.map(data.data,function(e){return moment(e.end_date, "DD-MM-YYYY HH:mm").toDate();}))).add(1,"days").startOf("day").toDate();
            initGantt("gantt_here", getSubScale("hour"), st, ed, 18);
            loadTask();
          },
          // error: defaultUpdtErrorCallback,
          dataType: "json"
        });
      },
      test : function() {
        console.log("ok");
      }
    },
    computed: {
      whiteboardAddress : function() {
        var task_cd = this.row.task_cd;
        if((task_cd != null) && (task_cd !== undefined) && (task_cd !== "")) {
          return "/view/whiteboard?whiteboard_cd=" + this.row.task_cd;
        } else {
          return "/view/whiteboard";
        }
      },
      markedDescription: function () {
        if(this.row) {
          return marked(this.row.description);
        } else {
          return "";
        }
      },
      dispTaskCd: function() {
        return (this.row.task_cd)? this.row.task_cd : "NEW";
      },
      hasTaskCd: function() {
        var taskCd = this.row.task_cd;
        if((taskCd == null) || (taskCd === undefined) || (taskCd === "")) {
          return false;
        } else {
          return true;
        }
      }
    },
    updated: function () {
      autosize.update($("textarea"))
      $("#progress").slider("setValue", Math.round(vue.row.progress * 100.0));
      $("#dpStart").datetimebox("setValue", vue.row.start_date);
      $("#dpEnd").datetimebox("setValue",  vue.row.end_date);
    }
  });
</script>

<script src="/js/workplan.js"></script>


