

<meta http-equiv="Content-type" content="text/html; charset=utf-8">
<title>Basic initialization</title>

<script src="/lib/gantt/codebase/dhtmlxgantt.js?v=20180227"></script>
<link rel="stylesheet" href="/lib/gantt/codebase/skins/dhtmlxgantt_meadow.css?v=20180227">
<script src="/lib/gantt/codebase/ext/dhtmlxgantt_marker.js"></script>
<script src="/lib/gantt/codebase/ext/dhtmlxgantt_tooltip.js"></script>

<link rel="stylesheet" type="text/css" href="/css/workplan.css">

<div class="easyui-panel" style="width:100%;margin-bottom:5px;">
  <div id="gantt_here" style='width:100%; height:400px;'></div>
</div>
<div id="vue-main" class="vue-component">
<span class="icon icon-calendar" id="btnScaleDay" style="cursor: pointer"></span>
<span class="icon icon-clock" id="btnScaleHour" style="cursor: pointer"></span>
<input type="checkbox" style="width:12px;height:12px" id="cbHideClosed" v-model="hideClosed">
<label for="cbHideClosed" style="font-size:0.5em; vertical-align:middle;">{{ (hideClosed)? "HIDE CLOSED" : "SHOW CLOSED" }}</label>
<input type="checkbox" style="width:12px;height:12px" id="cbFixedHeight" v-model="fixedHeight">
<label for="cbFixedHeight" style="font-size:0.5em; vertical-align:middle;">{{ (fixedHeight)? "FIXED HEIGHT" : "AUTO HEIGHT" }}</label>
<div class="easyui-panel" style="width:100%;padding:5px;margin-bottom:5px;">
  <!-- Set to width:100% cause overflow when toggle sidebar -->
  <table class="input-table" style="width:95%"> 
    <tr>
      <th width="100px">Task CD</th>
      <td width="200px">
        <span>{{(row.task_cd)? row.task_cd : "NEW"}}</span>
      </td>
    </tr>
    <tr>
      <th>Name</th>
      <td><input v-model="row.name" type="text" style="width:100%"></td>
    </tr>
    <tr>
      <th width="100px">Solution CD</th>
      <td>
        <!-- <select name="category" v-model="row.solution_cd" v-bind:disabled="multiRowSelected"> -->
        <select name="category" v-model="row.solution_cd">
          <option v-for="category in key_value_solution" :value="category.value">
            {{ category.text }}
          </option>
        </select>
      </td>
    </tr>
    <tr>
      <th>Type</th>
      <td>
        <select name="category" v-model="row.task_type">
          <option v-for="category in key_value_task_type" :value="category.value">
            {{ category.text }}
          </option>
        </select>
      </td>
    </tr>
    <tr>
      <th>Assigned to</th>
      <td>
        <select name="category" v-model="row.user_cd">
          <option v-for="category in key_value_user" :value="category.value">
            {{ category.text }}
          </option>
        </select>
      </td>
    </tr>
    <tr>
      <th>Priority</th>
      <td>
        <select name="category" v-model="row.priority_type">
          <option v-for="category in key_value_task_priority_type" :value="category.value">
            {{ category.text }}
          </option>
        </select>
      </td>
    </tr>
    <tr>
      <th>Status</th>
      <td>
        <select name="category" v-model="row.status_type">
          <option v-for="category in key_value_task_status_type" :value="category.value">
            {{ category.text }}
          </option>
        </select>
      </td>
    </tr>
    <tr>
      <th>Term</th>
      <td>
        <input id="dpStart" class="easyui-datetimebox" style="width:145px;">
        <span> --- </span>
        <input id="dpEnd" class="easyui-datetimebox" style="width:145px;">
      </td>
    </tr>
    <tr>
      <th>Progress</th>
      <!-- <td><input v-model="row.progress" type="text" style="width:140px"></td> -->
      <td style="height:60px;">
        <input class="easyui-slider" id="progress" style="width:300px" 
               data-options="showTip:true, rule: [0,'|',25,'|',50,'|',75,'|',100], step: 5">
      </td>
    </tr>
    <tr>
      <th>Parent CD</th>
      <td>
        <input v-model="row.parent_cd" type="text" style="width:140px">
        <span class="icon icon-copy" id="btnCopyTaskCd" style="cursor: pointer;font-size:16px"></span>
        <span class="icon icon-paste" id="btnPasteTaskCd" style="cursor: pointer;font-size:16px"></span>
      </td>
    </tr>
    <!-- <tr> -->
    <!--   <th>Sort order</th> -->
    <!--   <td><input v-model="row.sort_order" type="text" style="width:200px"></td> -->
    <!-- </tr> -->
    <!-- <tr> -->
    <!--   <th>Work type</th> -->
    <!--   <td> -->
    <!--     <select name="category" v-model="row.work_type"> -->
    <!--       <option v-for="category in key_value_work_type" :value="category.value"> -->
    <!--         {{ category.text }} -->
    <!--       </option> -->
    <!--     </select> -->
    <!--   </td> -->
    <!-- </tr> -->
    <tr>
      <th>Description <span class="icon icon-pencil" v-on:click="toggleDescriptionEdit"></span></th>
    </tr>
    <tr>
      <td colspan="2">
        <textarea v-show="showDescriptionView" id="taDesc" v-model="row.description" type="text" style="width:100%"> </textarea>
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <div class="easyui-panel descriptionView" v-html="markedDescription" style="padding:5px">
        </div>
      </td>
    </tr>
  </table>
</div>
  <div class="easyui-panel" style="width:100%;padding:5px;margin-bottom:5px;">
    <input id="btnRegister" type="button" value="Register" class="input-register"/>
    <input id="btnNew" type="button" value="New" class="input-register"/>
    <input id="btnCopy" type="button" value="Copy" class="input-register"/>
    <input id="btnDelete" type="button" value="Delete" class="input-register"/>
    <!-- <input id="btnScaleDay" type="button" value="Scale Day" class="input-register"/> -->
    <!-- <input id="btnScaleHour" type="button" value="Scale Hour" class="input-register"/> -->
    <input id="btnSortUp" type="button" value="UP" class="input-register"/>
    <input id="btnSortDown" type="button" value="DOWN" class="input-register"/>
    <!-- <input id="btnCopyWorkNo" type="button" value="Copy WkNo" class="input-register"/> -->
  </div>
</div>

<script type="text/javascript" src="/js/ex_datetimebox.js"></script>
<script type="text/javascript" src="/js/core_util.js"></script>

  <script>
  $(document).ready(function() {
    autosize($('textarea'));

    // $("#cbHideClosed").click(function() {
    // 
    // });

    // $("#progress").slider("setValue", Math.round(vue.row.progress * 100.0));
    $("#progress").slider({
      onChange : function(newval, oldval) {
        vue.row.progress = newval / 100.0;
      }
    });

    $("#dpStart").datetimebox({
      onChange: function(newval, oldval) {
        vue.row.start_date = newval;
      }
    });

    $("#dpEnd").datetimebox({
      onChange: function(newval, oldval) {
        vue.row.end_date = newval;
      }
    });

    $("#dpStart").datetimebox("setValue", moment().format("DD-MM-YYYY HH:mm"));
    $("#dpEnd").datetimebox("setValue", moment().add(7,"days").format("DD-MM-YYYY HH:mm"));

    $("#btnNew").click(function() {
      vue.row = newRecord();
    });

    $("#btnCopy").click(function() {
      vue.row.task_cd = "";
    });

    $("#btnDelete").click(function() {
      $.ajax({
        type: "DELETE",
        // url: "/workplans/" + vue.row.task_cd,
        url: "/tasks/" + vue.row.task_cd,
        data: JSON.stringify(vue.row),
        success: function(data, dataType) { 
          // defaultUpdtSuccessCallback(data, dataType);

          // if(data.success) {
          //   treegrid.treegrid("reload");
          //   vue[propNameSelectedRow] = fnNewRecord();
          // }
          console.log("deleted");

          var sPos = gantt.getScrollState(); // {x:58,y:180}
          var posX = sPos.x;
          var posY = sPos.y;
          gantt.deleteTask(vue.row.task_cd);

          loadTask(function() {
            gantt.scrollTo(posX,posY);
            vue.row = newRecord();
          });


        },
        // error: defaultUpdtErrorCallback,
        dataType: "json"
      });
    });

    $("#btnRegister").click(function() {
      console.log("Register");
      var id = vue.row.task_cd;
      $.ajax({
        type: "POST",
        url: "/workplans",
        data: JSON.stringify(vue.row),
        success: function(data, dataType) { 
          // defaultUpdtSuccessCallback(data, dataType);

          // if(data.success) {
          //   treegrid.treegrid("reload");
          //   vue[propNameSelectedRow] = fnNewRecord();
          // }
            console.log("comp");
            console.log(data);
          if((id !== "") && (id != null)) {
            var sPos = gantt.getScrollState(); // {x:58,y:180}
            var posX = sPos.x;
            var posY = sPos.y;
            loadTask(function() { 
              gantt.selectTask(id); 
              // gantt.showTask(id); 
              gantt.scrollTo(posX,posY);
            });
          } else {
            loadTask(function() {
              gantt.selectTask(data.task_cd); 
              gantt.showTask(data.task_cd); 
            });
          }
        },
        // error: defaultUpdtErrorCallback,
        dataType: "json"
      });
    });

    $("#btnScaleDay").click(function() {
      gantt.config.subscales = [
        {unit: "day", step: 1, date: "%d", css: daysStyle}
      ];
      // gantt.config.start_date = moment().add(-2,"months");
      gantt.config.start_date = moment().add(-2,"months").startOf("day");
      // gantt.config.end_date = moment().add(4,"months");
      gantt.config.end_date = moment().add(4,"months").startOf("day");
      gantt.config.min_column_width = 36;

      gantt.config.keep_grid_width = false;
      gantt.config.grid_resize = true;

  // gantt.config.duration_unit = "hour";
  // gantt.config.work_time = true; 
  // gantt.config.skip_off_time = true; 
  // gantt.setWorkTime({ hours:[9,18] });

      gantt.init("gantt_here");
      loadTask();
    });

    $("#btnScaleHour").click(function() {
      gantt.config.subscales = [
        {unit: "day", step:1,date:"%d",css:daysStyle},
        // {unit: "hour", step: 1, date: "%H", css: daysStyle}
        {unit: "hour", step: 1, date: "%G", css: daysStyle},
        {unit: "minute", step: 30, date: " ", css: daysStyle}
      ];


      $.ajax({
        type: "GET",
        // url: "/workplans",
        url: (vue.hideClosed)? "/workplans" : "/workplans/with_closed",
        data: JSON.stringify({}),
        success: function(data, dataType) { 
          // var st = moment(_.min(_.map(data,function(e){return moment(e.start_date, "DD-MM-YYYY HH:mm").toDate();}))).add(-1,"days").toDate();
          var st = moment(_.min(_.map(data,function(e){return moment(e.start_date, "DD-MM-YYYY HH:mm").toDate();}))).add(-1,"days").startOf("day").toDate();
          // var ed = moment(_.max(_.map(data,function(e){return moment(e.end_date, "DD-MM-YYYY HH:mm").toDate();}))).add(1,"days").toDate();
          var ed = moment(_.max(_.map(data,function(e){return moment(e.end_date, "DD-MM-YYYY HH:mm").toDate();}))).add(1,"days").startOf("day").toDate();

          gantt.config.start_date = st;
          gantt.config.end_date = ed;
          gantt.config.min_column_width = 18;

          gantt.config.keep_grid_width = false;
          gantt.config.grid_resize = true;

  // gantt.config.duration_unit = "hour";
  // gantt.config.work_time = true; 
  // gantt.config.skip_off_time = true; 
  // gantt.setWorkTime({ hours:[9,18] });

          gantt.init("gantt_here");
          loadTask();
        },
        // error: defaultUpdtErrorCallback,
        dataType: "json"
      });


    });

    function swapSortOrder(isUp, id, parentId) {
      if(isUp) {
        console.log("up");
      } else {
        console.log("down");
      }
      var targetId = id;
      var index = gantt.getTaskIndex(id);
      var children = gantt.getChildren(parentId);

      var isMovable = (isUp)? (index > 0) : (index < (children.length - 1));
      var targetIndex = (isUp)? (index-1) : (index+1);
      var row = null;
      var target = null;

      if(isMovable) {
        row = children[index];
        target = children[targetIndex];
        console.log("can swap", row, target);

        var task1Row = gantt.getTask(row);
        var task2Row = gantt.getTask(target);
        var task1 = {
          task_cd : task1Row["id"]
          ,task_cd2 : task1Row.task_cd2
          ,start_date : moment(task1Row.start_date).format('DD-MM-YYYY HH:mm')
          ,end_date : moment(task1Row.end_date).format('DD-MM-YYYY HH:mm')
          ,progress : task1Row.progress
          ,user_cd : task1Row.user_cd
          ,name : task1Row.name
          ,parent_cd : task1Row.parent_cd
          ,sort_order : task2Row.sort_order
          ,work_type : task1Row.work_type
          ,solution_cd : task1Row.solution_cd
          ,task_type : task1Row.task_type
          ,description : task1Row.description
          ,priority_type : task1Row.priority_type
          ,status_type : task1Row.status_type
        };
        var task2 = {
          task_cd : task2Row["id"]
          ,task_cd2 : task2Row.task_cd2
          ,start_date : moment(task2Row.start_date).format('DD-MM-YYYY HH:mm')
          ,end_date : moment(task2Row.end_date).format('DD-MM-YYYY HH:mm')
          ,progress : task2Row.progress
          ,user_cd : task2Row.user_cd
          ,name : task2Row.name
          ,parent_cd : task2Row.parent_cd
          ,sort_order : task1Row.sort_order
          ,work_type : task2Row.work_type
          ,solution_cd : task2Row.solution_cd
          ,task_type : task2Row.task_type
          ,description : task2Row.description
          ,priority_type : task2Row.priority_type
          ,status_type : task2Row.status_type
        };


        $.when(
          $.ajax({
            type: "POST",
            url: "/workplans",
            data: JSON.stringify(task1),
            success: function(data, dataType) { 
              // defaultUpdtSuccessCallback(data, dataType);

              // if(data.success) {
              //   treegrid.treegrid("reload");
              //   vue[propNameSelectedRow] = fnNewRecord();
              // }
            },
            // error: defaultUpdtErrorCallback,
            dataType: "json"
          }),
          $.ajax({
            type: "POST",
            url: "/workplans",
            data: JSON.stringify(task2),
            success: function(data, dataType) { 
              // defaultUpdtSuccessCallback(data, dataType);

              // if(data.success) {
              //   treegrid.treegrid("reload");
              //   vue[propNameSelectedRow] = fnNewRecord();
              // }
            },
            // error: defaultUpdtErrorCallback,
            dataType: "json"
          })
        )
        .done(function(data_a, data_b) {
          loadTask(function() { gantt.selectTask(targetId); });
          // vue.row = newRecord();
        })
        .fail(function() {
            console.log('error');
        });

      } else {
        console.log("can't swap");
      }
    }

    $("#btnSortUp").click(function() {
      //console.log("up");
      //var index = gantt.getTaskIndex(vue.row.task_cd);
      //var children = gantt.getChildren(vue.row.parent_cd);
      //if(index > 0) {
      //  console.log("can move up");
      //  var row = children[index];
      //  var target = children[index-1];
      //  console.log("swap", row, target);
      //}
      swapSortOrder(true, vue.row.task_cd, (vue.row.parent_cd !== "")? vue.row.parent_cd : 0);
    });

    $("#btnSortDown").click(function() {
      //console.log("down");
      //var index = gantt.getTaskIndex(vue.row.task_cd);
      //var children = gantt.getChildren(vue.row.parent_cd);
      //if(index < (children.length - 1)) {
      //  console.log("can move down");
      //  var row = children[index];
      //  var target = children[index+1];
      //  console.log("swap", row, target);
      //}
      swapSortOrder(false, vue.row.task_cd, (vue.row.parent_cd !== "")? vue.row.parent_cd : 0);
    });

    // $("#btnCopyWorkNo").click(function() {
    //   execCopy(vue.row.task_cd);
    // });

    $("#btnCopyTaskCd").click(function() {
      vue.currentParentCd = vue.row.task_cd;
      execCopy(vue.row.task_cd);
    });

    $("#btnPasteTaskCd").click(function() {
      vue.row.parent_cd = vue.currentParentCd;
    });


    loadTask();
  });
  </script>


  <script>

  var lastScrollPos = null;

	// var tasks = {
	// 	data: [
	// 		{
	// 			id: 1, text: "Project #2", start_date: "01-04-2018", duration: 18, order: 10,
	// 			progress: 0.4, open: true
	// 		},
	// 		{
	// 			id: 2, text: "Task #1", start_date: "02-04-2018", duration: 8, order: 10,
	// 			progress: 0.6, parent: 1
	// 		},
	// 		{
	// 			id: 3, text: "Task #2", start_date: "11-04-2018", duration: 8, order: 20,
	// 			progress: 0.6, parent: 2
	// 		}
	// 	],
	// 	links: [
	// 		{id: 1, source: 1, target: 2, type: "1"},
	// 		{id: 2, source: 2, target: 3, type: "0"}
	// 	]
	// };

  function daysStyle(date){
      var dateToStr = gantt.date.date_to_str("%D");
      if (dateToStr(date) == "Sun"||dateToStr(date) == "Sat")  return "weekend";
   
      return "";
  };

	var tasks = {
		data: [
			{
        id: 1, text: "Project #2", start_date: "01-04-2018", end_date: "02-04-2018", order: 10,
				progress: "0.4", open: true
			},
			{
				id: 2, text: "Task #1", start_date: "02-04-2018", end_date: "06-04-2018", order: 10,
				progress: 0.6, parent: 1, open:true
			},
			{
				id: 3, text: "Task #2", start_date: "03-04-2018", end_date: "04-04-2018", order: 20,
				progress: 0.6, parent: 2
			}
		],
		links: [
			// {id: 1, source: 1, target: 2, type: "1"},
			// {id: 2, source: 2, target: 3, type: "0"}
		]
  };

  function formatTask(task){
    // return task.task_cd + " : " + task.name;
    return task.name;
  };


  function mapper(field, map) {
    var col = field;
    var kv = {};
    for(var i = 0; i < map.length; i+=1) {
      kv[map[i]["value"]] = map[i]["text"];
    }

    return function(task) { return kv[task[col]]; }
  }

  gantt.config.columns=[
    {name:"text", label:"Task name", tree:true, width: 250, /*width:"*", min_width: 120,*/ template:formatTask },
    // {name:"start_date", label:"Start", align: "center",resize:true },
    // {name:"end_date",   label:"End",   align: "center",resize:true },
    {name:"solution_cd",   label:"Solution", width: 80,   align: "center", template : mapper("solution_cd", <%= @key_value_solution %>) },
    {name:"user_cd", label:"Assign", width: 60, align: "center", template : mapper("user_cd", <%= @key_value_user %>) },
    {name:"progress", label:"Progr", width: 45, align: "center", template: function(task) {return Math.round(task.progress * 100.0) + "%";} },
    {name:"status_type", label:"Status", width: 80, align: "center", template: mapper("status_type", <%= @key_value_task_status_type %>) }
  ];


	gantt.config.keep_grid_width = false;
	gantt.config.grid_resize = true;
  gantt.config.row_height = 20;
  gantt.config.open_tree_initially = true;

  // gantt.config.duration_unit = "hour";
  // gantt.config.work_time = true; 
  // gantt.config.skip_off_time = true; 
  // gantt.setWorkTime({ hours:[9,18] });

  // gantt.config.autosize = "y";

  gantt.config.start_date = moment().add(-2,"months");
  gantt.config.end_date = moment().add(4,"months");

  gantt.templates.scale_cell_class = function(date){
      if(date.getDay()==0||date.getDay()==6){ return "weekend"; }
  };
  gantt.templates.tooltip_text = function(start,end,task){
    var text = "";
    text += "<b>Solution: </b>" + (mapper("solution_cd", <%= @key_value_solution %>))(task) + "<br>";
    text += "<b>Task CD: </b>" + task.task_cd + "<br>";
    // text += "<b>Assigned to: </b>" + (mapper("user_cd", <%= @key_value_user %>))(task) + "<br>";
    // text += "<b>Progress: </b>" + Math.round(task.progress * 100.0) + "%<br>";
    // text += "<b>Task type: </b>" + (mapper("task_type", <%= @key_value_task_type %>))(task) + "<br>";
    text += "<b>Name: </b>" + task.name + "<br>";
    text += "<b>Description: </b><br>";
    // text += '<textarea>' +  task.description + '</textarea>' + "<br>";
    text += '<div style="padding:5px">'+marked(task.description)+'</div>';
    return text;
  };

	gantt.config.scale_unit = "month";
	gantt.config.date_scale = "%F, %Y";

  gantt.config.tooltip_timeout = 1;

  gantt.config.min_column_width = 36;
	gantt.config.scale_height = 50;

  gantt.config.order_branch = true;

  gantt.config.duration_unit = "hour";

  gantt.templates.scale_cell_class = function(date){
    return "";
  };

	gantt.config.subscales = [
		{unit: "day", step: 1, date: "%d", css: daysStyle}
	];

  //gantt.groupBy({
  //  relation_property: "user_cd",
  //  groups: [
  //    {key:'001', label: "admin"},
  //    {key:'002', label: "worker1"},
  //  ],
  //  group_id: "key",
  //  group_text: "label"
  //});

  //gantt.config.start_date = new Date(2017, 11, 01);
  //gantt.config.end_date = new Date(2018, 2, 01);
  //gantt.config.scale_unit = "day"; 
  //gantt.config.fit_tasks = false; 
  //gantt.config.date_scale = "Week #%W";

	gantt.templates.task_class = function(start, end, obj){
    // if(obj.work_type === "WT01PL") {
    //   return "";
    // } else if(obj.work_type == "WT02AC") {
    //   return "task_actual";
    // } else if(obj.work_type == "WT03PJ") {
    //   return "task_project";
    // }
    if(obj.task_type === "TT01TS") {
      return "";
    } else if(obj.task_type == "TT02BG") {
      return "task_actual";
    } else if(obj.task_type == "TT03PJ") {
      return "task_project";
    }
	}

  gantt.init("gantt_here");

  gantt.attachEvent("onBeforeRowDragEnd", function(id, parent, tindex){
    var task = gantt.getTask(id);
    if(task.parent != parent)
        return false;
    return true;
  });

  // gantt.attachEvent("onAfterTaskDrag", function(id, mode, e){
  //   if (mode === "progress") {
  //     // var task = gantt.getTask(id);
  //     // var roundedProgress = (Math.ceil((task.progress * 100.0)/5.0) * 5.0) / 100.0;
  //   }
  // });

  gantt.attachEvent("onRowDragEnd", function(id, target) {

    var task1Row = gantt.getTask(id);
    var task2Row = gantt.getTask(target);
    var task1 = {
      task_cd : task1Row["id"]
      ,task_cd2 : task1Row.task_cd2
      ,start_date : moment(task1Row.start_date).format('DD-MM-YYYY HH:mm')
      ,end_date : moment(task1Row.end_date).format('DD-MM-YYYY HH:mm')
      ,progress : task1Row.progress
      ,user_cd : task1Row.user_cd
      ,name : task1Row.name
      ,parent_cd : task1Row.parent_cd
      ,sort_order : task2Row.sort_order
      ,work_type : task1Row.work_type
      ,description : task1Row.description
    };
    var task2 = {
      task_cd : task2Row["id"]
      ,task_cd2 : task2Row.task_cd2
      ,start_date : moment(task2Row.start_date).format('DD-MM-YYYY HH:mm')
      ,end_date : moment(task2Row.end_date).format('DD-MM-YYYY HH:mm')
      ,progress : task2Row.progress
      ,user_cd : task2Row.user_cd
      ,name : task2Row.name
      ,parent_cd : task2Row.parent_cd
      ,sort_order : task1Row.sort_order
      ,work_type : task2Row.work_type
      ,description : task2Row.description
    };


    $.when(
      $.ajax({
        type: "POST",
        url: "/workplans",
        data: JSON.stringify(task1),
        success: function(data, dataType) { 
          // defaultUpdtSuccessCallback(data, dataType);

          // if(data.success) {
          //   treegrid.treegrid("reload");
          //   vue[propNameSelectedRow] = fnNewRecord();
          // }
        },
        // error: defaultUpdtErrorCallback,
        dataType: "json"
      }),
      $.ajax({
        type: "POST",
        url: "/workplans",
        data: JSON.stringify(task2),
        success: function(data, dataType) { 
          // defaultUpdtSuccessCallback(data, dataType);

          // if(data.success) {
          //   treegrid.treegrid("reload");
          //   vue[propNameSelectedRow] = fnNewRecord();
          // }
        },
        // error: defaultUpdtErrorCallback,
        dataType: "json"
      })
    )
    .done(function(data_a, data_b) {
          loadTask();
          vue.row = newRecord();
    })
    .fail(function() {
        console.log('error');
    });

  });

  gantt.attachEvent("onGanttScroll", function (left, top){
    lastScrollPos = left;
  });

  gantt.attachEvent("onTaskSelected", function(id){
    //any custom logic here
    var item = gantt.getTask(id);
    var vueRow = {
      task_cd : item["id"]
      ,task_cd2 : item.task_cd2
      ,start_date : moment(item.start_date).format('DD-MM-YYYY HH:mm')
      ,end_date : moment(item.end_date).format('DD-MM-YYYY HH:mm')
      ,progress : item.progress
      ,user_cd : item.user_cd
      ,name : item.name
      ,parent_cd : item.parent_cd
      ,sort_order : item.sort_order
      ,work_type : item.work_type
      ,solution_cd : item.solution_cd
      ,task_type : item.task_type
      ,description : item.description
      ,priority_type : item.priority_type
      ,status_type : item.status_type
    };
    vue.row = vueRow;
  });

  gantt.attachEvent("onTaskRowClick", function(id,row){
    //any custom logic here
    var item = gantt.getTask(id);
    console.log(item);
    var vueRow = {
      task_cd : item["id"]
      ,task_cd2 : item.task_cd2
      ,start_date : moment(item.start_date).format('DD-MM-YYYY HH:mm')
      ,end_date : moment(item.end_date).format('DD-MM-YYYY HH:mm')
      ,progress : item.progress
      ,user_cd : item.user_cd
      ,name : item.name
      ,parent_cd : item.parent_cd
      ,sort_order : item.sort_order
      ,work_type : item.work_type
      ,solution_cd : item.solution_cd
      ,task_type : item.task_type
      ,description : item.description
      ,priority_type : item.priority_type
      ,status_type : item.status_type
    };
    vue.row = vueRow;
  });

  gantt.attachEvent("onAfterTaskUpdate", function(id,item){
      //any custom logic here
    console.log("updated");
    console.log(item);
    console.log(moment(item.start_date).format('DD-MM-YYYY HH:mm'));

    var roundedProgress = (Math.round((item.progress * 100.0)/5.0) * 5.0) / 100.0;

    var diff = {
      task_cd : item["id"]
      ,task_cd2 : item.task_cd2
      ,start_date : moment(item.start_date).format('DD-MM-YYYY HH:mm')
      ,end_date : moment(item.end_date).format('DD-MM-YYYY HH:mm')
      // ,progress : item.progress
      ,progress : roundedProgress
      ,user_cd : item.user_cd
      ,name : item.name
      ,parent_cd : item.parent_cd
      ,sort_order : item.sort_order
      ,work_type : item.work_type
      ,solution_cd : item.solution_cd
      ,task_type : item.task_type
      ,description : item.description
      ,priority_type : item.priority_type
      ,status_type : item.status_type
    };
    var id = item["id"];
    $.ajax({
      type: "POST",
      url: "/workplans",
      data: JSON.stringify(diff),
      success: function(data, dataType) { 
        // defaultUpdtSuccessCallback(data, dataType);

        // if(data.success) {
        //   treegrid.treegrid("reload");
        //   vue[propNameSelectedRow] = fnNewRecord();
        // }

        if((id !== "") && (id != null)) {
          var sPos = gantt.getScrollState(); // {x:58,y:180}
          var posX = sPos.x;
          var posY = sPos.y;
          loadTask(function() { 
            gantt.selectTask(id); 
            // gantt.showTask(id); 
            gantt.scrollTo(posX,posY);
          });
          console.log("task selecting");
        } else {
          loadTask(function() {
            gantt.selectTask(data.task_cd); 
            gantt.showTask(data.task_cd); 
          });
          console.log("task not selecting");
        }


        // var item = gantt.getTask(id);
        // var vueRow = {
        //   task_cd : item["id"]
        //   ,task_cd2 : item.task_cd2
        //   ,start_date : moment(item.start_date).format('DD-MM-YYYY HH:mm')
        //   ,end_date : moment(item.end_date).format('DD-MM-YYYY HH:mm')
        //   ,progress : item.progress
        //   ,user_cd : item.user_cd
        //   ,name : item.name
        //   ,parent_cd : item.parent_cd
        //   ,sort_order : item.sort_order
        //   ,work_type : item.work_type
        // };
        // vue.row = vueRow;
      },
      // error: defaultUpdtErrorCallback,
      dataType: "json"
    });
  });

  // loadTask();

  function loadTask(postLoad) {
    $.ajax({
      type: "GET",
      // url: "/workplans",
      url: (vue.hideClosed)? "/workplans" : "/workplans/with_closed",
      data: JSON.stringify({}),
      success: function(data, dataType) { 
        // defaultUpdtSuccessCallback(data, dataType);

        // if(data.success) {
        //   treegrid.treegrid("reload");
        //   vue[propNameSelectedRow] = fnNewRecord();
        // }

        var x = {
          data:data,
          links:[]
        };
        gantt.clearAll(); 
        gantt.parse(x);
        if(lastScrollPos) {
          gantt.scrollTo(lastScrollPos, null);
        } else {
          gantt.showDate(new Date());
        }

        var today = moment();
        gantt.addMarker({ start_date: today.toDate(), css: "today", text: "",  title:today.format("DD-MM-YYYY")});

        if(postLoad) {
          postLoad();
        }
      },
      // error: defaultUpdtErrorCallback,
      dataType: "json"
    });
  }

  function toLocaleString( date )
  {
    return [
        date.getDate(),
        date.getMonth() + 1,
        date.getFullYear()
        ].join( '-' );
  }
  </script>

<script>
  function newRecord() {
    return { 
      task_cd : null,
      task_cd2 : "",
      parent_cd : "",
      start_date : moment().format("DD-MM-YYYY HH:mm"),
      end_date : moment().add(7,"days").format("DD-MM-YYYY HH:mm"),
      progress : 0.0,
      user_cd : "000",
      name : "",
      parent_cd : "",
      sort_order : 0,
      work_type : "WT01PL",
      solution_cd : "01",
      task_type : "TT01TS",
      description : "",
      priority_type : "TP03NM",
      status_type : "TS01NW"
    };
  }
  //
  //function copyRecord() {
  //  var source = vue.row;
  //  var record = newRecord();
  //  record.solution_cd = source.solution_cd;
  //  record.task_cd2 = null;
  //  record.task_type = source.task_type;
  //  record.name = source.name;
  //  record.status_type = "TS01NW";
  //  record.priority_type = source.priority_type;
  //  record.description = source.description;
  //  record.parent_cd = source.parent_cd;
  //  return record;
  //}
  //
  //
  //function blankRecordForBatchUpdate() {
  //  return { 
  //    solution_cd : "",
  //    task_cd2 : "",
  //    task_type : "",
  //    name : "",
  //    status_type : "",
  //    description : "",
  //    priority_type : "",
  //    created: "",
  //    created_by : "",
  //    updated: "",
  //    updated_by : "",
  //    parent_cd : ""
  //  };
  //}

  var vue = new Vue({
    el: '#vue-main',
    data: {
      key_value_task_status_type : <%= @key_value_task_status_type %>,
      key_value_task_type : <%= @key_value_task_type %>,
      key_value_task_priority_type : <%= @key_value_task_priority_type %>,
      key_value_solution : <%= @key_value_solution %>,
      key_value_task_task_relation_type : <%= @key_value_task_task_relation_type %>,
      key_value_user : <%= @key_value_user %>,
      key_value_work_type : <%= @key_value_work_type %>,
      row: newRecord(),
      //descContent : "",
      //multiRowSelected : false,
      //rowSelections : null,
      showDescriptionView : false,
      currentParentCd : "",
      hideClosed : true,
      fixedHeight : true
      //relTaskCd : "",
      //relType : "TR01RR",
      //contextRow : null
    },
    watch: {
      hideClosed: 'loadByChecked',
      fixedHeight: 'loadByChangeHeight'
    },
    // methods: {
    //     foo: function(){
    //         alert(this.test);
    //     }
    // }

    methods: {
      loadByChecked : function() {
        loadTask();
      },
      loadByChangeHeight : function() {
        if(vue.fixedHeight) {
          gantt.config.autosize = false;
        } else {
          gantt.config.autosize = "y";
        }
        gantt.init("gantt_here");
        if(vue.fixedHeight) {
          $("#gantt_here").css("height", "400px")
        }
        loadTask();
      },
      toggleDescriptionEdit : function() {
        this.showDescriptionView = !(this.showDescriptionView);
      }
      //,linkTask : function () {
      //   $.ajax({
      //     type: "POST",
      //     url: "/link/task_task",
      //     data: JSON.stringify({taskCdA:vue.row.task_cd2, taskCdB:vue.relTaskCd,relType:vue.relType}),
      //     success: function(data, dataType) { 
      //       if(data.success) {
      //         messageUpdateSuccess(data.message);
      //       } else {
      //         messageUpdateError(data.message);
      //       }
      //       $("#dg").treegrid("reload");
      //     },
      //     error: function() {
      //     },
      //     dataType: "json"
      //   });
      // }
    },
    computed: {
      markedDescription: function () {
        if(this.row) {
          return marked(this.row.description);
        } else {
          return "";
        }
      }
      //,
      // taskRelation : function() {
      //   if(this.row !== null) {
      //     var infos = [];
      //     if(this.row.parent_task != null) {
      //       infos.push({task_cd2_a : this.row.task_cd2, task_cd2_b : this.row.parent_cd, t_task : this.row.parent_task, rel_type : "TR02PR"});
      //     }
      //     if(this.row.children_all && this.row.children_all.length > 0) {
      //       for(var i = 0; i < this.row.children_all.length; i+=1) {
      //         infos.push({task_cd2_a : this.row.task_cd2, task_cd2_b : this.row.children_all[i].task_cd2, t_task : this.row.children_all[i], rel_type : "TR03CH"});
      //       }
      //     }
      //     if(this.row.t_task_task_rel != null) {
      //       for(var i = 0; i < this.row.t_task_task_rel.length; i+=1) {
      //         infos.push(this.row.t_task_task_rel[i]);
      //       }
      //     }
      //     return infos;
      //   } else {
      //     return [];
      //   }
      // }
    },
    updated: function () {
      autosize.update($("textarea"))
      $("#progress").slider("setValue", Math.round(vue.row.progress * 100.0));
      // $("#dpStart").datetimebox("setValue", moment(vue.row.start_date, "DD-MM-YYYY HH:mm").format("MM/DD/YYYY HH:mm:ss"));
      $("#dpStart").datetimebox("setValue", vue.row.start_date);
      // $("#dpEnd").datetimebox("setValue",  moment(vue.row.end_date, "DD-MM-YYYY HH:mm").format("MM/DD/YYYY HH:mm:ss"));
      $("#dpEnd").datetimebox("setValue",  vue.row.end_date);
    }

    //,
    //methods: {
    //  //toggleDescriptionEdit : function() {
    //  //  this.showDescriptionView = !(this.showDescriptionView);
    //  //},
    //  //linkTask : function () {
    //  //  $.ajax({
    //  //    type: "POST",
    //  //    url: "/link/task_task",
    //  //    data: JSON.stringify({taskCdA:vue.row.task_cd2, taskCdB:vue.relTaskCd,relType:vue.relType}),
    //  //    success: function(data, dataType) { 
    //  //      if(data.success) {
    //  //        messageUpdateSuccess(data.message);
    //  //      } else {
    //  //        messageUpdateError(data.message);
    //  //      }
    //  //      $("#dg").treegrid("reload");
    //  //    },
    //  //    error: function() {
    //  //    },
    //  //    dataType: "json"
    //  //  });
    //  //},
    //  //unlinkTask : function(taskCdA,taskCdB,relType) {
    //  //  $.ajax({
    //  //    type: "POST",
    //  //    url: "/unlink/task_task",
    //  //    data: JSON.stringify({taskCdA:taskCdA, taskCdB:taskCdB,relType:relType}),
    //  //    success: function(data, dataType) { 
    //  //      if(data.success) {
    //  //        messageUpdateSuccess(data.message);
    //  //      } else {
    //  //        messageUpdateError(data.message);
    //  //      }
    //  //      $("#dg").treegrid("reload");
    //  //    },
    //  //    error: function() {
    //  //    },
    //  //    dataType: "json"
    //  //  });
    //  //},
    //  //reloadTask : function(taskCd) {
    //  //  console.log("****", taskCd);
    //  //  var self = this;

    //  //  $.ajax({
    //  //    type: "GET",
    //  //    url: "/tasks/"+taskCd,
    //  //    success: function(data, dataType) { 
    //  //      //if(data.success) {
    //  //        self.multiRowSelected = false;
    //  //        self.row = $.extend(true, {}, data);
    //  //      //} else {
    //  //      //  messageUpdateError("Retrieve information failed");
    //  //      //}
    //  //      console.log(data);
    //  //    },
    //  //    error: function() {
    //  //      messageUpdateError("Request failed");
    //  //    },
    //  //    dataType: "json"
    //  //  });
    //  //},
    //  //relationStyle : function(relType) {
    //  //  if(relType == "TR01RR") {
    //  //    return "icon icon-arrow-left";
    //  //  }
    //  //  if(relType == "TR02PR") {
    //  //    return "icon icon-arrow-up-left";
    //  //  }
    //  //  if(relType == "TR03CH") {
    //  //    return "icon icon-arrow-down-right";
    //  //  }
    //  //}
    //},
  });
</script>

<script src="/js/workplan.js"></script>


