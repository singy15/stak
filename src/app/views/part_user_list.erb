
<style>
.descriptionView table {
  border: 1px #000000 solid;
  border-collapse: collapse;
}
.descriptionView td {
  border: 1px #000000 solid;
}
.descriptionView th {
  border: 1px #000000 solid;
}
.icon {
 cursor: pointer
}
.link {
  cursor: pointer;
  text-decoration: underline;
}
.tree-icon {
  display : none;
}
.tree-checkbox0 {
  opacity : 0.3;
}
.tree-checkbox1 {
  opacity : 1.0;
}
.tree-indent {
  opacity : 0.5;
}
.datagrid-row-selected  td {
  /*background: #ffe48d;*/
  /*background: #ffffff;*/
  /*color: #FF0000;*/
  /*font-weight : bold;*/
  background-color:rgba( 0, 0, 0, 0.2 );
  color : #000;
}
.datagrid-row-selected {
  /*background-color:rgba( 0, 0, 0, 0.1 );*/
  background: #ffffff;
}
.datagrid-row{
    height: 10px;
}
</style>

<div id="vue-main" class="vue-component">
  <div class="easyui-panel" style="width:100%;margin-bottom:5px;">
    <div id="dg" class="easyui-treegrid" style="width:100%"></div>
  </div>
  <div class="easyui-panel" style="width:100%;padding:5px;margin-bottom:5px;">
    <!-- Set to width:100% cause overflow when toggle sidebar -->
    <table class="input-table" style="width:95%">
      <tr>
        <th style="width:100px">User CD</th>
        <td>
          <span>{{(row.user_cd)? row.user_cd : "NEW"}}</span>
        </td>
      </tr>
      <tr>
        <th>Name</th>
        <td><input v-model="row.name" type="text" style="width:200px"></td>
      </tr>
    <!--   <tr>-->
    <!--   <tr>-->
    <!--     <th>Task CD</th>-->
    <!--     <td>-->
    <!--       <span>{{(row.task_cd)? row.task_cd : "NEW"}}</span>-->
    <!--     </td>-->
    <!--   </tr>-->
    <!--   <tr>-->
    <!--     <th width="100px">Solution CD</th>-->
    <!--     <td>-->
    <!--       <select name="category" v-model="row.solution_cd" v-bind:disabled="multiRowSelected">-->
    <!--         <option v-for="category in key_value_solution" :value="category.value">-->
    <!--           {{ category.text }}-->
    <!--         </option>-->
    <!--       </select>-->
    <!--     </td>-->
    <!--   </tr>-->
    <!--   <tr>-->
    <!--     <th>Type</th>-->
    <!--     <td>-->
    <!--       <select name="category" v-model="row.task_type">-->
    <!--         <option v-for="category in key_value_task_type" :value="category.value">-->
    <!--           {{ category.text }}-->
    <!--         </option>-->
    <!--       </select>-->
    <!--     </td>-->
    <!--   </tr>-->
    <!--   <tr>-->
    <!--     <th>Name</th>-->
    <!--     <td><input v-model="row.name" type="text" style="width:100%"></td>-->
    <!--   </tr>-->
    <!--   <tr>-->
    <!--     <th>Status</th>-->
    <!--     <td>-->
    <!--       <select name="category" v-model="row.status_type">-->
    <!--         <option v-for="category in key_value_task_status_type" :value="category.value">-->
    <!--           {{ category.text }}-->
    <!--         </option>-->
    <!--       </select>-->
    <!--     </td>-->
    <!--   </tr>-->
    <!--   <tr>-->
    <!--     <th>Priority</th>-->
    <!--     <td>-->
    <!--       <select name="category" v-model="row.priority_type">-->
    <!--         <option v-for="category in key_value_task_priority_type" :value="category.value">-->
    <!--           {{ category.text }}-->
    <!--         </option>-->
    <!--       </select>-->
    <!--     </td>-->
    <!--   </tr>-->
    <!--   <tr>-->
    <!--     <th>Created</th>-->
    <!--     <td><span>{{row.created_by}}</span><span>&nbsp;</span><span>{{row.created}}</span></td>-->
    <!--   </tr>-->
    <!--   <tr>-->
    <!--     <th>Updated</th>-->
    <!--     <td><span>{{row.updated_by}}</span><span>&nbsp;</span><span>{{row.updated}}</span></td>-->
    <!--   </tr>-->
    <!--   <tr>-->
    <!--     <th>Parent</th>-->
    <!--     <td><input v-model="row.parent_cd" type="text" style="width:80px"></td>-->
    <!--   </tr>-->
    <!--   <tr>-->
    <!--     <th>Related</th>-->
    <!--     <td>-->
    <!--       <select name="category" v-model="relType">-->
    <!--         <option v-for="category in key_value_task_task_relation_type" :value="category.value">-->
    <!--           {{ category.text }}-->
    <!--         </option>-->
    <!--       </select>-->
    <!--       <input v-model="relTaskCd" type="text" style="width:80px">-->
    <!--       <span class="icon icon-link" v-on:click="linkTask"></span>-->
    <!--       <ul id="lsRelated">-->
    <!--         <li v-for="(item, index) in taskRelation">-->
    <!--           <span v-bind:class="relationStyle(item.rel_type)"></span>-->
    <!--           <span class="link" v-on:click="reloadTask(item.task_cd_b)">{{item.task_cd_b}}</span> : {{item.t_task.name}}-->
    <!--           <span class="icon icon-cancel-circle" v-on:click="unlinkTask(item.task_cd_a, item.task_cd_b, item.rel_type)"></span>-->
    <!--         </li>-->
    <!--       </ul>-->
    <!--     </td>-->
    <!--   </tr>-->
    <!--   <tr>-->
    <!--     <th>Description <span class="icon icon-pencil" v-on:click="toggleDescriptionEdit"></span></th>-->
    <!--   </tr>-->
    <!--   <tr>-->
    <!--     <td colspan="2">-->
    <!--       <textarea v-show="showDescriptionView" id="taDesc" v-model="row.description" type="text" style="width:100%"> </textarea>-->
    <!--     </td>-->
    <!--   </tr>-->
    <!--   <tr>-->
    <!--     <td colspan="2">-->
    <!--       <div class="easyui-panel descriptionView" v-html="markedDescription" style="padding:5px">-->
    <!--       </div>-->
    <!--     </td>-->
    <!--   </tr>-->
    </table>
  </div>
  <div class="easyui-panel" style="width:100%;padding:5px;margin-bottom:5px;">
    <input id="btnRegister" type="button" value="Register" class="input-register"/>
    <input id="btnNew" type="button" value="New" class="input-register"/>
    <input id="btnCopy" type="button" value="Copy" class="input-register"/>
    <input id="btnDelete" type="button" value="Delete" class="input-register"/>
  </div>
</div>
<script type="text/javascript">
  //function mapper(field, map) {
  //  var col = field;
  //  var kv = {};
  //  for(var i = 0; i < map.length; i+=1) {
  //    kv[map[i]["value"]] = map[i]["text"];
  //  }

  //  return function(value,row,index) { return kv[row[col]]; }
  //}

  $(document).ready(function() {
  //  autosize($('textarea'));

    $("#btnNew").click(function() {
      singleNew(vue, "row", $("#dg"), newRecord);
    });

    $("#btnCopy").click(function() {
      singleCopy(vue, "row", $("#dg"), copyRecord);
    });

    $("#btnDelete").click(function() {
      if(vue.row.user_cd !== "") {
        singleDel(vue, "users", "row", "user_cd", $("#dg"), newRecord);
      }
    });

    $("#btnRegister").click(function() {
      // if(vue.multiRowSelected) {
      //   batchUpd(vue, "row", "rowSelections", $("#dg"), newRecord, "tasks");
      // } else {
        singleInsUpd(vue, "row", $("#dg"), newRecord, "users");
      // }
    });

    $("#dg").treegrid({
      url : '/users',
      method : 'get',
      // sortName : "user_cd",
      multiSort : true,
      remoteSort : true,
      ctrlSelect : true,
      remoteFilter : true,
      pagination : true,
      rownumbers:true,
      filterDelay : 700,
      idField : "user_cd",
      columns : [[
        {field : 'user_cd', title : 'User CD', width : 90, sortable : true},
        {field : 'name', title : 'Name', width: 200, sortable : true},
        {field : 'created', title : 'Created', sortable : true},
        {field : 'created_by', title : 'Created by', sortable : true},
        {field : 'updated', title : 'Updated', sortable : true},
        {field : 'updated_by', title : 'Updated by', sortable : true}
      ]],
      onClickRow : function(row) {
        //if($("#dg").treegrid("getSelections").length > 1) {
        //  vue.multiRowSelected = true;
        //  vue.row = blankRecordForBatchUpdate();
        //} else {
        //  vue.multiRowSelected = false;
        //  vue.row = $.extend(true, {}, row);
        //}

        //vue.rowSelections = $("#dg").treegrid("getSelections");

        vue.row = $.extend(true, {}, row);
      },
      onLoadSuccess : function() {
        //if(($("#dg").treegrid("getSelections").length) == 1){
        //  var cd = ($("#dg").treegrid("getSelections")[0]).task_cd;
        //  $("#dg").treegrid("clearSelections");
        //  //$("#dg").treegrid("selectRecord", cd);
        //  $("#dg").treegrid("select", cd);
        //  var row = $("#dg").treegrid("getSelected");
        //  vue.multiRowSelected = false;
        //  vue.row = $.extend(true, {}, row);
        //} else {
        //  $("#dg").treegrid("clearSelections");
        //}
      }
    });

    //$("#dg").treegrid("options").url = "/tasks";
    //$("#dg").treegrid("load");
  });
</script>
<script>
  function newRecord() {
    return { 
      user_cd : "",
      name : "",
      created: "",
      created_by : "",
      updated: "",
      updated_by : ""
    };
  }

  function copyRecord() {
    var source = vue.row;
    var record = newRecord();
    record.user_cd = "";
    record.name = source.name;
    return record;
  }
//
//
//  function blankRecordForBatchUpdate() {
//    return { 
//      solution_cd : "",
//      task_cd : "",
//      task_type : "",
//      name : "",
//      status_type : "",
//      description : "",
//      priority_type : "",
//      created: "",
//      created_by : "",
//      updated: "",
//      updated_by : "",
//      parent_cd : ""
//    };
//  }
//

var vue = new Vue({
  el: '#vue-main',
  data: {
    row : newRecord()
  }
});

//  var vue = new Vue({
//    el: '#vue-main',
//    data: {
//      key_value_task_status_type : <%= @key_value_task_status_type %>,
//      key_value_task_type : <%= @key_value_task_type %>,
//      key_value_task_priority_type : <%= @key_value_task_priority_type %>,
//      key_value_solution : <%= @key_value_solution %>,
//      key_value_task_task_relation_type : <%= @key_value_task_task_relation_type %>,
//      row: newRecord(),
//      descContent : "",
//      multiRowSelected : false,
//      rowSelections : null,
//      showDescriptionView : false,
//      relTaskCd : "",
//      relType : "TR01RR",
//      contextRow : null
//    },
//    methods: {
//      toggleDescriptionEdit : function() {
//        this.showDescriptionView = !(this.showDescriptionView);
//      },
//      linkTask : function () {
//        $.ajax({
//          type: "POST",
//          url: "/link/task_task",
//          data: JSON.stringify({taskCdA:vue.row.task_cd, taskCdB:vue.relTaskCd,relType:vue.relType}),
//          success: function(data, dataType) { 
//            if(data.success) {
//              messageUpdateSuccess(data.message);
//            } else {
//              messageUpdateError(data.message);
//            }
//            $("#dg").treegrid("reload");
//          },
//          error: function() {
//          },
//          dataType: "json"
//        });
//      },
//      unlinkTask : function(taskCdA,taskCdB,relType) {
//        $.ajax({
//          type: "POST",
//          url: "/unlink/task_task",
//          data: JSON.stringify({taskCdA:taskCdA, taskCdB:taskCdB,relType:relType}),
//          success: function(data, dataType) { 
//            if(data.success) {
//              messageUpdateSuccess(data.message);
//            } else {
//              messageUpdateError(data.message);
//            }
//            $("#dg").treegrid("reload");
//          },
//          error: function() {
//          },
//          dataType: "json"
//        });
//      },
//      reloadTask : function(taskCd) {
//        console.log("****", taskCd);
//        var self = this;
//
//        $.ajax({
//          type: "GET",
//          url: "/tasks/"+taskCd,
//          success: function(data, dataType) { 
//            //if(data.success) {
//              self.multiRowSelected = false;
//              self.row = $.extend(true, {}, data);
//            //} else {
//            //  messageUpdateError("Retrieve information failed");
//            //}
//            console.log(data);
//          },
//          error: function() {
//            messageUpdateError("Request failed");
//          },
//          dataType: "json"
//        });
//      },
//      relationStyle : function(relType) {
//        if(relType == "TR01RR") {
//          return "icon icon-arrow-left";
//        }
//        if(relType == "TR02PR") {
//          return "icon icon-arrow-up-left";
//        }
//        if(relType == "TR03CH") {
//          return "icon icon-arrow-down-right";
//        }
//      }
//    },
//    computed: {
//      markedDescription: function () {
//        if(this.row) {
//          return marked(this.row.description);
//        } else {
//          return "";
//        }
//      },
//      taskRelation : function() {
//        if(this.row !== null) {
//          var infos = [];
//          if(this.row.parent_task != null) {
//            infos.push({task_cd_a : this.row.task_cd, task_cd_b : this.row.parent_cd, t_task : this.row.parent_task, rel_type : "TR02PR"});
//          }
//          if(this.row.children_all && this.row.children_all.length > 0) {
//            for(var i = 0; i < this.row.children_all.length; i+=1) {
//              infos.push({task_cd_a : this.row.task_cd, task_cd_b : this.row.children_all[i].task_cd, t_task : this.row.children_all[i], rel_type : "TR03CH"});
//            }
//          }
//          if(this.row.t_task_task_rel != null) {
//            for(var i = 0; i < this.row.t_task_task_rel.length; i+=1) {
//              infos.push(this.row.t_task_task_rel[i]);
//            }
//          }
//          return infos;
//        } else {
//          return [];
//        }
//      }
//    },
//    updated: function () {
//      autosize.update($("textarea"))
//    }
//  });
</script>

